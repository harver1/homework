# Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса
# Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем
# с первым элементом первой строки второй матрицы и т.д.


class Matrix():

    def __init__(self, mtrx):
        self.mtrx = mtrx

    def __str__(self):
        # return '\n'.join(' '.join([str(i) for i in el]) for el in self.mtrx)
        return '\n'.join(' '.join(map(str, el)) for el in self.mtrx)

# как правильнее написать, через переменную rez или сразу в return выкинуть генератор
    def __add__(self, other):
        if len(self.mtrx) != len(other.mtrx):
            return f'невозможно произвести сложение, разное колчество элементов матрицы!'
        rez = [[i + j for i, j in zip(slf, othr)] for slf, othr in zip(self.mtrx, other.mtrx)]
        return Matrix(rez)
        # return Matrix([[i + j for i, j in zip(slf, othr)] for slf, othr in zip(self.mtrx, other.mtrx)])


# первый набор матриц
matrix1 = Matrix([[1, 3, 5], [2, 1, 6]])
matrix2= Matrix([[2, 2, 1], [2, 1, 3]])
# второй набор матриц
matrix3 = Matrix([[0, 3], [10, 11], [21, 10]])
matrix4 = Matrix([[41, 27], [23, 34], [22, 33]])
# сложение
print(matrix1 + matrix2)
print(matrix3 + matrix4)


